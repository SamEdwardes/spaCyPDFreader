{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"spacypdfreader Easy PDF to text to spaCy text extraction in Python. Documentation: https://samedwardes.github.io/spacypdfreader/ Source code: https://github.com/SamEdwardes/spacypdfreader PyPi: https://pypi.org/project/spacypdfreader/ spacypdfreader is a python library for extracting text from PDF documents into spaCy Doc objects. When you use spacypdfreader the token and doc objects from spacy are annotated with additional information about the pdf. The key features are: PDF to spaCy Doc object: Convert a PDF document directly into a spaCy Doc object. Custom spaCy attributes and methods: token._.page_number doc._.page_range doc._.first_page doc._.last_page doc._.pdf_file_name doc._.page(int) Multiple parsers: Select between multiple built in PDF to text parsers or bring your own PDF to text parser. Installation Install spacypdfreader using pip: pip install spacypdfreader To install with the required pytesseract dependencies: pip install 'spacypdfreader[pytesseract]' Usage import spacy from spacypdfreader import pdf_reader nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) # Get the page number of any token. print ( doc [ 0 ] . _ . page_number ) # 1 print ( doc [ - 1 ] . _ . page_number ) # 4 # Get page meta data about the PDF document. print ( doc . _ . pdf_file_name ) # \"tests/data/test_pdf_01.pdf\" print ( doc . _ . page_range ) # (1, 4) print ( doc . _ . first_page ) # 1 print ( doc . _ . last_page ) # 4 # Get all of the text from a specific PDF page. print ( doc . _ . page ( 4 )) # \"able to display the destination page (unless...\" What is spaCy ? spaCy is a natural language processing (NLP) tool. It can be used to perform a variety of NLP tasks. For more information check out the excellent documentation at https://spacy.io . Implementation Notes spaCyPDFreader behaves a little bit different than your typical spaCy custom component . Typically a spaCy component should receive and return a spacy.tokens.Doc object. spaCyPDFreader breaks this convention because the text must first be extracted from the PDF. Instead pdf_reader takes a path to a PDF file and a spacy.Language object as parameters and returns a spacy.tokens.Doc object. This allows users an easy way to extract text from PDF files while still allowing them use and customize all of the features spacy has to offer by allowing you to pass in the spacy.Language object. Example of a \"traditional\" spaCy pipeline component negspaCy : import spacy from negspacy.negation import Negex nlp = spacy . load ( \"en_core_web_sm\" ) nlp . add_pipe ( \"negex\" , config = { \"ent_types\" :[ \"PERSON\" , \"ORG\" ]}) doc = nlp ( \"She does not like Steve Jobs but likes Apple products.\" ) Example of spaCyPDFreader usage: import spacy from spacypdfreader import pdf_reader nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) Note that the nlp.add_pipe is not used by spaCyPDFreader.","title":"Home"},{"location":"#spacypdfreader","text":"Easy PDF to text to spaCy text extraction in Python. Documentation: https://samedwardes.github.io/spacypdfreader/ Source code: https://github.com/SamEdwardes/spacypdfreader PyPi: https://pypi.org/project/spacypdfreader/ spacypdfreader is a python library for extracting text from PDF documents into spaCy Doc objects. When you use spacypdfreader the token and doc objects from spacy are annotated with additional information about the pdf. The key features are: PDF to spaCy Doc object: Convert a PDF document directly into a spaCy Doc object. Custom spaCy attributes and methods: token._.page_number doc._.page_range doc._.first_page doc._.last_page doc._.pdf_file_name doc._.page(int) Multiple parsers: Select between multiple built in PDF to text parsers or bring your own PDF to text parser.","title":"spacypdfreader"},{"location":"#installation","text":"Install spacypdfreader using pip: pip install spacypdfreader To install with the required pytesseract dependencies: pip install 'spacypdfreader[pytesseract]'","title":"Installation"},{"location":"#usage","text":"import spacy from spacypdfreader import pdf_reader nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) # Get the page number of any token. print ( doc [ 0 ] . _ . page_number ) # 1 print ( doc [ - 1 ] . _ . page_number ) # 4 # Get page meta data about the PDF document. print ( doc . _ . pdf_file_name ) # \"tests/data/test_pdf_01.pdf\" print ( doc . _ . page_range ) # (1, 4) print ( doc . _ . first_page ) # 1 print ( doc . _ . last_page ) # 4 # Get all of the text from a specific PDF page. print ( doc . _ . page ( 4 )) # \"able to display the destination page (unless...\"","title":"Usage"},{"location":"#what-is-spacy","text":"spaCy is a natural language processing (NLP) tool. It can be used to perform a variety of NLP tasks. For more information check out the excellent documentation at https://spacy.io .","title":"What is spaCy?"},{"location":"#implementation-notes","text":"spaCyPDFreader behaves a little bit different than your typical spaCy custom component . Typically a spaCy component should receive and return a spacy.tokens.Doc object. spaCyPDFreader breaks this convention because the text must first be extracted from the PDF. Instead pdf_reader takes a path to a PDF file and a spacy.Language object as parameters and returns a spacy.tokens.Doc object. This allows users an easy way to extract text from PDF files while still allowing them use and customize all of the features spacy has to offer by allowing you to pass in the spacy.Language object. Example of a \"traditional\" spaCy pipeline component negspaCy : import spacy from negspacy.negation import Negex nlp = spacy . load ( \"en_core_web_sm\" ) nlp . add_pipe ( \"negex\" , config = { \"ent_types\" :[ \"PERSON\" , \"ORG\" ]}) doc = nlp ( \"She does not like Steve Jobs but likes Apple products.\" ) Example of spaCyPDFreader usage: import spacy from spacypdfreader import pdf_reader nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) Note that the nlp.add_pipe is not used by spaCyPDFreader.","title":"Implementation Notes"},{"location":"changelog/","text":"Changelog 0.2.1 (2022-01-09) Added examples to the API docs. Added continuous deployment for GitHub pages. 0.2.0 (2021-12-10) Added support for additional pdf to text extraction engines: pytesseract textract Added the ability to bring your own pdf to text extraction engine. Added new spacy extension attributes and methods: doc._.page_range doc._.first_page doc._.last_page doc._.pdf_file_name doc._.page(int) Built a new documentation site: https://samedwardes.github.io/spaCyPDFreader/ 0.1.1 (2021-12-10) 0.1.1 Python ^3.7 support by @SamEdwardes in https://github.com/SamEdwardes/spaCyPDFreader/pull/2","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#021-2022-01-09","text":"Added examples to the API docs. Added continuous deployment for GitHub pages.","title":"0.2.1 (2022-01-09)"},{"location":"changelog/#020-2021-12-10","text":"Added support for additional pdf to text extraction engines: pytesseract textract Added the ability to bring your own pdf to text extraction engine. Added new spacy extension attributes and methods: doc._.page_range doc._.first_page doc._.last_page doc._.pdf_file_name doc._.page(int) Built a new documentation site: https://samedwardes.github.io/spaCyPDFreader/","title":"0.2.0 (2021-12-10)"},{"location":"changelog/#011-2021-12-10","text":"0.1.1 Python ^3.7 support by @SamEdwardes in https://github.com/SamEdwardes/spaCyPDFreader/pull/2","title":"0.1.1 (2021-12-10)"},{"location":"contributing/","text":"Contributing Code style The black code formatter should be run against all code. black spacypdfreader Documentation Documentation is built using Material for mkdocs . All of the documentations lives within the docs/ directory. Test the docs locally To test the docs locally run the following command: mkdocs serve Publish the docs The docs are hosted on using GitHub pages at https://samedwardes.github.io/spaCyPDFreader/contributing/ . Run the following to update the docs: rm -rf site mkdocs build mkdocs gh-deploy","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#code-style","text":"The black code formatter should be run against all code. black spacypdfreader","title":"Code style"},{"location":"contributing/#documentation","text":"Documentation is built using Material for mkdocs . All of the documentations lives within the docs/ directory.","title":"Documentation"},{"location":"contributing/#test-the-docs-locally","text":"To test the docs locally run the following command: mkdocs serve","title":"Test the docs locally"},{"location":"contributing/#publish-the-docs","text":"The docs are hosted on using GitHub pages at https://samedwardes.github.io/spaCyPDFreader/contributing/ . Run the following to update the docs: rm -rf site mkdocs build mkdocs gh-deploy","title":"Publish the docs"},{"location":"parsers/","text":"Parsers Extracting text from PDF documents can be challenging. There are several different options in the python ecosystem. spacypdfreader makes it easy to extract text from PDF documents. At this time spacypdfreader has built in support for two options: pdfminer : the default option ( GitHub | PyPi | Docs ) pytesseract : alternative option ( GitHub | PyPi ) You can also bring your own custom PDF to text parser to use in spacypdfreader . Tip \ud83d\udc81\u200d\u2642\ufe0f Would you like to see another parser added? Please submit an issue on GitHub and the maintainer will look into adding support. Comparison of built in parsers All PDF to text parsers have their tradeoffs. The table below summaries the pros and cons of the built in parsers. pdfminer pytesseract When to use \u26a1\ufe0f When speed is more important than accuracy. \ud83c\udf93 When accuracy is more important than speed. Accuracy \ud83d\udc4c Medium: from my experience pdfminer struggles with documents where the text is in one or more columns. \ud83d\udc4d High: very good. Performs well on messy documents (e.g hand written text, PDFs with multiple columns of text on a single page). Speed \ud83d\udc4c Medium: the text extraction is not instant, but it does not take forever. \ud83d\udc4e Slow: the text extraction is very slow and will take hours on hundreds of pages. Installation \ud83d\udc4d Easy: pure python, if you have installed spacypdfreader you already have everything you need. \ud83d\udc4e Complicated: relies on additional non-python dependencies that can be complicated for beginners to install. How it works Text is extracted directly from PDF using only Python. Each pdf page is converted into an image. Optical character recognition is then run on each image. pdfminer A pure Python library for extracting text from PDFs. Installation No action required, pdfminer will automatically be installed when you install spacypdfreader . Usage pdfminer is the default PDF to text extraction parser for spacypdfreader : import spacy from spacypdfreader import pdf_reader nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) You could also be more verbose and pass in additional parameters. For a list of available parameters please refer to the pdfminer documentation for the extract_function function. import spacy from spacypdfreader import pdf_reader from spacypdfreader.parsers.pdfminer import PdfminerParser nlp = spacy . load ( \"en_core_web_sm\" ) params = { \"caching\" : False } doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PdfminerParser , ** params ) pytesseract A PDf to text extraction engine that uses Googles tesseract OCR engine. Installation You can install most of the dependencies by pip installing spacypdfreader with some optional dependencies: pip install 'spacypdfreader[pytesseract]' Unfortunately this will not always install all of the dependencies because some of them are non-python related. I find that installing pytesseract can be a little bit tricky for beginners. Please refer to https://github.com/madmaze/pytesseract#installation for details on how to install pytesseract if the above does not work. Usage To use pytesseract you must pass the pytesseract parser into the pdf_parser argument. For a list of available parameters you can pass in refer the documentation for the image_to_string function from pytesseract . import spacy from spacypdfreader import pdf_reader from spacypdfreader.parsers.pytesseract import PytesseractParser nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PytesseractParser ) Bring your own parser spacypdfreader allows your to bring your custom PDF parser. The only requirement is that the parser must have a way for you to specify which page of the PDF document you would like to extract. The code below demonstrates the implementation of a new custom parser: from typing import Any import spacy from pdfminer.high_level import extract_text from spacypdfreader import pdf_reader from spacypdfreader.parsers.base import BaseParser # (1) class CustomParser ( BaseParser ): # (2) name : str = \"custom\" # (3) def pdf_to_text ( self , ** kwargs : Any ) -> str : # (4) # pdfminer uses zero indexed page numbers. Therefore need to remove 1 # from the page count. self . page_number -= 1 text = extract_text ( self . pdf_path , page_numbers = [ self . page_number ], ** kwargs ) return text nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , CustomParser ) print ( doc . _ . page_range ) # (1, 4) BaseParser is the base class that all parsers inherit from in spacypdfreader . When creating a new class it must inherit from the BaseParser class. The new class must have a name attribute. The new class must have a method called pdf_to_text . This method should only convert one pdf page at a time. Note spacypdfreader uses \"1 based indexing\". The first page of the PDF is considered page 1, as opposed to page 0.","title":"Parsers"},{"location":"parsers/#parsers","text":"Extracting text from PDF documents can be challenging. There are several different options in the python ecosystem. spacypdfreader makes it easy to extract text from PDF documents. At this time spacypdfreader has built in support for two options: pdfminer : the default option ( GitHub | PyPi | Docs ) pytesseract : alternative option ( GitHub | PyPi ) You can also bring your own custom PDF to text parser to use in spacypdfreader . Tip \ud83d\udc81\u200d\u2642\ufe0f Would you like to see another parser added? Please submit an issue on GitHub and the maintainer will look into adding support.","title":"Parsers"},{"location":"parsers/#comparison-of-built-in-parsers","text":"All PDF to text parsers have their tradeoffs. The table below summaries the pros and cons of the built in parsers. pdfminer pytesseract When to use \u26a1\ufe0f When speed is more important than accuracy. \ud83c\udf93 When accuracy is more important than speed. Accuracy \ud83d\udc4c Medium: from my experience pdfminer struggles with documents where the text is in one or more columns. \ud83d\udc4d High: very good. Performs well on messy documents (e.g hand written text, PDFs with multiple columns of text on a single page). Speed \ud83d\udc4c Medium: the text extraction is not instant, but it does not take forever. \ud83d\udc4e Slow: the text extraction is very slow and will take hours on hundreds of pages. Installation \ud83d\udc4d Easy: pure python, if you have installed spacypdfreader you already have everything you need. \ud83d\udc4e Complicated: relies on additional non-python dependencies that can be complicated for beginners to install. How it works Text is extracted directly from PDF using only Python. Each pdf page is converted into an image. Optical character recognition is then run on each image.","title":"Comparison of built in parsers"},{"location":"parsers/#pdfminer","text":"A pure Python library for extracting text from PDFs. Installation No action required, pdfminer will automatically be installed when you install spacypdfreader . Usage pdfminer is the default PDF to text extraction parser for spacypdfreader : import spacy from spacypdfreader import pdf_reader nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) You could also be more verbose and pass in additional parameters. For a list of available parameters please refer to the pdfminer documentation for the extract_function function. import spacy from spacypdfreader import pdf_reader from spacypdfreader.parsers.pdfminer import PdfminerParser nlp = spacy . load ( \"en_core_web_sm\" ) params = { \"caching\" : False } doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PdfminerParser , ** params )","title":"pdfminer"},{"location":"parsers/#pytesseract","text":"A PDf to text extraction engine that uses Googles tesseract OCR engine. Installation You can install most of the dependencies by pip installing spacypdfreader with some optional dependencies: pip install 'spacypdfreader[pytesseract]' Unfortunately this will not always install all of the dependencies because some of them are non-python related. I find that installing pytesseract can be a little bit tricky for beginners. Please refer to https://github.com/madmaze/pytesseract#installation for details on how to install pytesseract if the above does not work. Usage To use pytesseract you must pass the pytesseract parser into the pdf_parser argument. For a list of available parameters you can pass in refer the documentation for the image_to_string function from pytesseract . import spacy from spacypdfreader import pdf_reader from spacypdfreader.parsers.pytesseract import PytesseractParser nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PytesseractParser )","title":"pytesseract"},{"location":"parsers/#bring-your-own-parser","text":"spacypdfreader allows your to bring your custom PDF parser. The only requirement is that the parser must have a way for you to specify which page of the PDF document you would like to extract. The code below demonstrates the implementation of a new custom parser: from typing import Any import spacy from pdfminer.high_level import extract_text from spacypdfreader import pdf_reader from spacypdfreader.parsers.base import BaseParser # (1) class CustomParser ( BaseParser ): # (2) name : str = \"custom\" # (3) def pdf_to_text ( self , ** kwargs : Any ) -> str : # (4) # pdfminer uses zero indexed page numbers. Therefore need to remove 1 # from the page count. self . page_number -= 1 text = extract_text ( self . pdf_path , page_numbers = [ self . page_number ], ** kwargs ) return text nlp = spacy . load ( \"en_core_web_sm\" ) doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , CustomParser ) print ( doc . _ . page_range ) # (1, 4) BaseParser is the base class that all parsers inherit from in spacypdfreader . When creating a new class it must inherit from the BaseParser class. The new class must have a name attribute. The new class must have a method called pdf_to_text . This method should only convert one pdf page at a time. Note spacypdfreader uses \"1 based indexing\". The first page of the PDF is considered page 1, as opposed to page 0.","title":"Bring your own parser"},{"location":"api/spacy-extensions/","text":"spaCy custom extensions When using spacypdfreader.spacypdfreader.pdf_reader custom attributes and methods are added to spacy objects. spacy.Doc Extension attributes Extension Type Description doc._.pdf_file_name str The file name of the PDF document. doc._.first_page int The first page number of the PDF. doc._.last_page int The last page number of the PDF. doc._.page_range (int, int) The range of pages from the PDF. doc._.page(int) int Return the span of text related to the page. Extension methods Doc._.page Parameters: Name Type Description Default page_number int The PDF page number of the doc to filter on. required Returns: Type Description spacy.Span The span of text from the corresponding PDF page number. spacy.Token Extension attributes Extension Type Description token._.page_number int The PDF page number in which the token was extracted from. The first page is 1 .","title":"spaCy custom extensions"},{"location":"api/spacy-extensions/#spacy-custom-extensions","text":"When using spacypdfreader.spacypdfreader.pdf_reader custom attributes and methods are added to spacy objects.","title":"spaCy custom extensions"},{"location":"api/spacy-extensions/#spacydoc","text":"","title":"spacy.Doc"},{"location":"api/spacy-extensions/#extension-attributes","text":"Extension Type Description doc._.pdf_file_name str The file name of the PDF document. doc._.first_page int The first page number of the PDF. doc._.last_page int The last page number of the PDF. doc._.page_range (int, int) The range of pages from the PDF. doc._.page(int) int Return the span of text related to the page.","title":"Extension attributes"},{"location":"api/spacy-extensions/#extension-methods","text":"","title":"Extension methods"},{"location":"api/spacy-extensions/#doc_page","text":"Parameters: Name Type Description Default page_number int The PDF page number of the doc to filter on. required Returns: Type Description spacy.Span The span of text from the corresponding PDF page number.","title":"Doc._.page"},{"location":"api/spacy-extensions/#spacytoken","text":"","title":"spacy.Token"},{"location":"api/spacy-extensions/#extension-attributes_1","text":"Extension Type Description token._.page_number int The PDF page number in which the token was extracted from. The first page is 1 .","title":"Extension attributes"},{"location":"api/spacypdfreader.parsers/","text":"spacypdfreader.parsers spacypdfreader.parsers.base.BaseParser The base parser class. The BaseParser is used to extend spacypdfreader with additional PDF to text parsers. See Parsers section in the documentation for additional details. Attributes: Name Type Description name str A string name representation of the class. Will only be used for information purposes by being printed to the terminal when running. pdf_path str Path to a PDF file. page_number int The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). Source code in spacypdfreader/parsers/base.py class BaseParser : \"\"\"The base parser class. The `BaseParser` is used to extend spacypdfreader with additional PDF to text parsers. See [Parsers](/parsers) section in the documentation for additional details. Attributes: name: A string name representation of the class. Will only be used for information purposes by being printed to the terminal when running. pdf_path: Path to a PDF file. page_number: The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). \"\"\" name : str = \"base\" pdf_path : str page_number : int def __init__ ( self , pdf_path : str , page_number : int ) -> None : \"\"\" Args: pdf_path: Path to a PDF file. page_number: The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). \"\"\" self . pdf_path = pdf_path self . page_number = page_number __init__ ( self , pdf_path : str , page_number : int ) -> None special Parameters: Name Type Description Default pdf_path str Path to a PDF file. required page_number int The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). required Source code in spacypdfreader/parsers/base.py def __init__ ( self , pdf_path : str , page_number : int ) -> None : \"\"\" Args: pdf_path: Path to a PDF file. page_number: The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). \"\"\" self . pdf_path = pdf_path self . page_number = page_number spacypdfreader.parsers.pdfminer.PdfminerParser ( BaseParser ) Convert PDFs to text using pdfminer. The pdfminer library is \"pure python\" library for converting PDF into text. pdfminer is relatively fast, but has low accuracy than other parsers such as pytesseract . Refer to spacypdfreader.parsers.base.BaseParser for a list of attributes and the __init__ method. Examples: PdfminerParser is the default PDF to text parser and will be automatically used unless otherwise specificied. >>> import spacy >>> from spacypdfreader import pdf_reader >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) To be more explicit import PdfminerParser and pass it into the pdf_reader function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PdfminerParser ) For more fine tuning you can pass in additional parameters to pdfminer. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> params = { \"caching\" : False } >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PdfminerParser , ** params ) Info See the pdfminer section in the docs for more details on the implementation of pdfminer. For more details on pdfminer refer to the pdfminer docs . Source code in spacypdfreader/parsers/pdfminer.py class PdfminerParser ( BaseParser ): \"\"\"Convert PDFs to text using pdfminer. The pdfminer library is \"pure python\" library for converting PDF into text. pdfminer is relatively fast, but has low accuracy than other parsers such as [pytesseract](/parsers/#pytesseract). Refer to [spacypdfreader.parsers.base.BaseParser][] for a list of attributes and the `__init__` method. Examples: `PdfminerParser` is the default PDF to text parser and will be automatically used unless otherwise specificied. >>> import spacy >>> from spacypdfreader import pdf_reader >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp) To be more explicit import `PdfminerParser` and pass it into the `pdf_reader` function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser) For more fine tuning you can pass in additional parameters to pdfminer. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> params = {\"caching\": False} >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser, **params) Info: See the [pdfminer section](/parsers/#pdfminer) in the docs for more details on the implementation of pdfminer. For more details on pdfminer refer to the [pdfminer docs](https://pdfminersix.readthedocs.io/en/latest/). \"\"\" name : str = \"pdfminer\" def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `extract_text` function from pdfminer. Args: **kwargs: Arbitrary keyword arguments. See the pdfminer docs for the [extract_text](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text) function for the available keywork arguments. Returns: A string respresentation of the PDF page. \"\"\" # pdfminer uses zero indexed page numbers. Therefore need to remove 1 # from the page count. self . page_number -= 1 text = extract_text ( self . pdf_path , page_numbers = [ self . page_number ], ** kwargs ) return text pdf_to_text ( self , ** kwargs : Any ) -> str Convert a PDF page to text using the extract_text function from pdfminer. Parameters: Name Type Description Default **kwargs Any Arbitrary keyword arguments. See the pdfminer docs for the extract_text function for the available keywork arguments. {} Returns: Type Description str A string respresentation of the PDF page. Source code in spacypdfreader/parsers/pdfminer.py def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `extract_text` function from pdfminer. Args: **kwargs: Arbitrary keyword arguments. See the pdfminer docs for the [extract_text](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text) function for the available keywork arguments. Returns: A string respresentation of the PDF page. \"\"\" # pdfminer uses zero indexed page numbers. Therefore need to remove 1 # from the page count. self . page_number -= 1 text = extract_text ( self . pdf_path , page_numbers = [ self . page_number ], ** kwargs ) return text spacypdfreader.parsers.pytesseract.PytesseractParser ( BaseParser ) Convert PDFs to text using pytesseract. The pytesseract library has the highest accuracy of all the PDF to text parsers included in spacypdfreader. It takes a different approach than other parsers. It first converts the PDF to an image, then runs an OCR engine on the image to extract the text. pytesseract results in the best quality but can be very slow compared to other parsers. Refer to spacypdfreader.parsers.base.BaseParser for a list of attributes and the __init__ method. Examples: To use PytesseractParser it must be explicitly imported and passed into the pdf_reader function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PytesseractParser ) For more fine tuning you can pass in additional parameters to pytesseract. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> params = { \"nice\" : 1 } >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PytesseractParser , ** params ) Info See the pytesseract section in the docs for more details on the implementation of pytesseract. For more details on pytesseract see the pytesseract docs . Source code in spacypdfreader/parsers/pytesseract.py class PytesseractParser ( BaseParser ): \"\"\"Convert PDFs to text using pytesseract. The pytesseract library has the highest accuracy of all the PDF to text parsers included in spacypdfreader. It takes a different approach than other parsers. It first converts the PDF to an image, then runs an OCR engine on the image to extract the text. pytesseract results in the best quality but can be very slow compared to other parsers. Refer to [spacypdfreader.parsers.base.BaseParser][] for a list of attributes and the `__init__` method. Examples: To use `PytesseractParser` it must be explicitly imported and passed into the `pdf_reader` function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser) For more fine tuning you can pass in additional parameters to pytesseract. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> params = {\"nice\": 1} >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser, **params) Info: See the [pytesseract section](/parsers/#pytesseract) in the docs for more details on the implementation of pytesseract. For more details on pytesseract see the [pytesseract docs](https://github.com/madmaze/pytesseract). \"\"\" name : str = \"pytesseract\" def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `image_to_string` function from pytesseract. Args: **kwargs: Arbitrary keyword arguments. See the pytesseract docs for the [image_to_string](https://github.com/madmaze/pytesseract) function for the available keyword arguments. Returns: A string respresentation of the PDF page. \"\"\" with tempfile . TemporaryDirectory () as tmp_dir : # Convert pdf page to image. file_name = convert_from_path ( self . pdf_path , output_folder = tmp_dir , paths_only = True , first_page = self . page_number , last_page = self . page_number + 1 , )[ 0 ] # Convert images to text. file_path = os . path . join ( tmp_dir , file_name ) text = str ( image_to_string ( Image . open ( file_path ), ** kwargs )) return text pdf_to_text ( self , ** kwargs : Any ) -> str Convert a PDF page to text using the image_to_string function from pytesseract. Parameters: Name Type Description Default **kwargs Any Arbitrary keyword arguments. See the pytesseract docs for the image_to_string function for the available keyword arguments. {} Returns: Type Description str A string respresentation of the PDF page. Source code in spacypdfreader/parsers/pytesseract.py def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `image_to_string` function from pytesseract. Args: **kwargs: Arbitrary keyword arguments. See the pytesseract docs for the [image_to_string](https://github.com/madmaze/pytesseract) function for the available keyword arguments. Returns: A string respresentation of the PDF page. \"\"\" with tempfile . TemporaryDirectory () as tmp_dir : # Convert pdf page to image. file_name = convert_from_path ( self . pdf_path , output_folder = tmp_dir , paths_only = True , first_page = self . page_number , last_page = self . page_number + 1 , )[ 0 ] # Convert images to text. file_path = os . path . join ( tmp_dir , file_name ) text = str ( image_to_string ( Image . open ( file_path ), ** kwargs )) return text","title":"spacypdfreader.parsers"},{"location":"api/spacypdfreader.parsers/#spacypdfreaderparsers","text":"","title":"spacypdfreader.parsers"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.base.BaseParser","text":"The base parser class. The BaseParser is used to extend spacypdfreader with additional PDF to text parsers. See Parsers section in the documentation for additional details. Attributes: Name Type Description name str A string name representation of the class. Will only be used for information purposes by being printed to the terminal when running. pdf_path str Path to a PDF file. page_number int The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). Source code in spacypdfreader/parsers/base.py class BaseParser : \"\"\"The base parser class. The `BaseParser` is used to extend spacypdfreader with additional PDF to text parsers. See [Parsers](/parsers) section in the documentation for additional details. Attributes: name: A string name representation of the class. Will only be used for information purposes by being printed to the terminal when running. pdf_path: Path to a PDF file. page_number: The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). \"\"\" name : str = \"base\" pdf_path : str page_number : int def __init__ ( self , pdf_path : str , page_number : int ) -> None : \"\"\" Args: pdf_path: Path to a PDF file. page_number: The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). \"\"\" self . pdf_path = pdf_path self . page_number = page_number","title":"BaseParser"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.base.BaseParser.__init__","text":"Parameters: Name Type Description Default pdf_path str Path to a PDF file. required page_number int The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). required Source code in spacypdfreader/parsers/base.py def __init__ ( self , pdf_path : str , page_number : int ) -> None : \"\"\" Args: pdf_path: Path to a PDF file. page_number: The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0). \"\"\" self . pdf_path = pdf_path self . page_number = page_number","title":"__init__()"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pdfminer.PdfminerParser","text":"Convert PDFs to text using pdfminer. The pdfminer library is \"pure python\" library for converting PDF into text. pdfminer is relatively fast, but has low accuracy than other parsers such as pytesseract . Refer to spacypdfreader.parsers.base.BaseParser for a list of attributes and the __init__ method. Examples: PdfminerParser is the default PDF to text parser and will be automatically used unless otherwise specificied. >>> import spacy >>> from spacypdfreader import pdf_reader >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp ) To be more explicit import PdfminerParser and pass it into the pdf_reader function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PdfminerParser ) For more fine tuning you can pass in additional parameters to pdfminer. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> params = { \"caching\" : False } >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PdfminerParser , ** params ) Info See the pdfminer section in the docs for more details on the implementation of pdfminer. For more details on pdfminer refer to the pdfminer docs . Source code in spacypdfreader/parsers/pdfminer.py class PdfminerParser ( BaseParser ): \"\"\"Convert PDFs to text using pdfminer. The pdfminer library is \"pure python\" library for converting PDF into text. pdfminer is relatively fast, but has low accuracy than other parsers such as [pytesseract](/parsers/#pytesseract). Refer to [spacypdfreader.parsers.base.BaseParser][] for a list of attributes and the `__init__` method. Examples: `PdfminerParser` is the default PDF to text parser and will be automatically used unless otherwise specificied. >>> import spacy >>> from spacypdfreader import pdf_reader >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp) To be more explicit import `PdfminerParser` and pass it into the `pdf_reader` function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser) For more fine tuning you can pass in additional parameters to pdfminer. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pdfminer import PdfminerParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> params = {\"caching\": False} >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser, **params) Info: See the [pdfminer section](/parsers/#pdfminer) in the docs for more details on the implementation of pdfminer. For more details on pdfminer refer to the [pdfminer docs](https://pdfminersix.readthedocs.io/en/latest/). \"\"\" name : str = \"pdfminer\" def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `extract_text` function from pdfminer. Args: **kwargs: Arbitrary keyword arguments. See the pdfminer docs for the [extract_text](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text) function for the available keywork arguments. Returns: A string respresentation of the PDF page. \"\"\" # pdfminer uses zero indexed page numbers. Therefore need to remove 1 # from the page count. self . page_number -= 1 text = extract_text ( self . pdf_path , page_numbers = [ self . page_number ], ** kwargs ) return text","title":"PdfminerParser"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pdfminer.PdfminerParser.pdf_to_text","text":"Convert a PDF page to text using the extract_text function from pdfminer. Parameters: Name Type Description Default **kwargs Any Arbitrary keyword arguments. See the pdfminer docs for the extract_text function for the available keywork arguments. {} Returns: Type Description str A string respresentation of the PDF page. Source code in spacypdfreader/parsers/pdfminer.py def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `extract_text` function from pdfminer. Args: **kwargs: Arbitrary keyword arguments. See the pdfminer docs for the [extract_text](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text) function for the available keywork arguments. Returns: A string respresentation of the PDF page. \"\"\" # pdfminer uses zero indexed page numbers. Therefore need to remove 1 # from the page count. self . page_number -= 1 text = extract_text ( self . pdf_path , page_numbers = [ self . page_number ], ** kwargs ) return text","title":"pdf_to_text()"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pytesseract.PytesseractParser","text":"Convert PDFs to text using pytesseract. The pytesseract library has the highest accuracy of all the PDF to text parsers included in spacypdfreader. It takes a different approach than other parsers. It first converts the PDF to an image, then runs an OCR engine on the image to extract the text. pytesseract results in the best quality but can be very slow compared to other parsers. Refer to spacypdfreader.parsers.base.BaseParser for a list of attributes and the __init__ method. Examples: To use PytesseractParser it must be explicitly imported and passed into the pdf_reader function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PytesseractParser ) For more fine tuning you can pass in additional parameters to pytesseract. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy . load ( \"en_core_web_sm\" ) >>> params = { \"nice\" : 1 } >>> doc = pdf_reader ( \"tests/data/test_pdf_01.pdf\" , nlp , PytesseractParser , ** params ) Info See the pytesseract section in the docs for more details on the implementation of pytesseract. For more details on pytesseract see the pytesseract docs . Source code in spacypdfreader/parsers/pytesseract.py class PytesseractParser ( BaseParser ): \"\"\"Convert PDFs to text using pytesseract. The pytesseract library has the highest accuracy of all the PDF to text parsers included in spacypdfreader. It takes a different approach than other parsers. It first converts the PDF to an image, then runs an OCR engine on the image to extract the text. pytesseract results in the best quality but can be very slow compared to other parsers. Refer to [spacypdfreader.parsers.base.BaseParser][] for a list of attributes and the `__init__` method. Examples: To use `PytesseractParser` it must be explicitly imported and passed into the `pdf_reader` function. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser) For more fine tuning you can pass in additional parameters to pytesseract. >>> import spacy >>> from spacypdfreader import pdf_reader >>> from spacypdfreader.parsers.pytesseract import PytesseractParser >>> >>> nlp = spacy.load(\"en_core_web_sm\") >>> params = {\"nice\": 1} >>> doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser, **params) Info: See the [pytesseract section](/parsers/#pytesseract) in the docs for more details on the implementation of pytesseract. For more details on pytesseract see the [pytesseract docs](https://github.com/madmaze/pytesseract). \"\"\" name : str = \"pytesseract\" def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `image_to_string` function from pytesseract. Args: **kwargs: Arbitrary keyword arguments. See the pytesseract docs for the [image_to_string](https://github.com/madmaze/pytesseract) function for the available keyword arguments. Returns: A string respresentation of the PDF page. \"\"\" with tempfile . TemporaryDirectory () as tmp_dir : # Convert pdf page to image. file_name = convert_from_path ( self . pdf_path , output_folder = tmp_dir , paths_only = True , first_page = self . page_number , last_page = self . page_number + 1 , )[ 0 ] # Convert images to text. file_path = os . path . join ( tmp_dir , file_name ) text = str ( image_to_string ( Image . open ( file_path ), ** kwargs )) return text","title":"PytesseractParser"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pytesseract.PytesseractParser.pdf_to_text","text":"Convert a PDF page to text using the image_to_string function from pytesseract. Parameters: Name Type Description Default **kwargs Any Arbitrary keyword arguments. See the pytesseract docs for the image_to_string function for the available keyword arguments. {} Returns: Type Description str A string respresentation of the PDF page. Source code in spacypdfreader/parsers/pytesseract.py def pdf_to_text ( self , ** kwargs : Any ) -> str : \"\"\"Convert a PDF page to text using the `image_to_string` function from pytesseract. Args: **kwargs: Arbitrary keyword arguments. See the pytesseract docs for the [image_to_string](https://github.com/madmaze/pytesseract) function for the available keyword arguments. Returns: A string respresentation of the PDF page. \"\"\" with tempfile . TemporaryDirectory () as tmp_dir : # Convert pdf page to image. file_name = convert_from_path ( self . pdf_path , output_folder = tmp_dir , paths_only = True , first_page = self . page_number , last_page = self . page_number + 1 , )[ 0 ] # Convert images to text. file_path = os . path . join ( tmp_dir , file_name ) text = str ( image_to_string ( Image . open ( file_path ), ** kwargs )) return text","title":"pdf_to_text()"},{"location":"api/spacypdfreader.spacypdfreader/","text":"spacypdfreader.spacypdfreader spacypdfreader.spacypdfreader pdf_reader ( pdf_path : str , nlp : < MagicMock name = 'mock.Language' id = '140183424638048' > , pdf_parser : BaseParser = < class ' spacypdfreader . parsers . pdfminer . PdfminerParser '>, verbose: bool = False, **kwargs: Any) -> <MagicMock name=' mock . tokens . Doc ' id=' 140183424686384 '> Convert a PDF document to a spaCy Doc object. Parameters: Name Type Description Default pdf_path str Path to a PDF file. required nlp <MagicMock name='mock.Language' id='140183424638048'> A spaCy Language object with a loaded pipeline. For example spacy.load(\"en_core_web_sm\") . required pdf_parser BaseParser The parser to convert PDF file to text. Read the docs for more detailsDefaults to pdfminer.Parser. <class 'spacypdfreader.parsers.pdfminer.PdfminerParser'> verbose bool If True details will be printed to the terminal. By default, False. False **kwargs Any Arbitrary keyword arguments. {} Returns: Type Description <MagicMock name='mock.tokens.Doc' id='140183424686384'> A spacy Doc object with the custom extensions. Source code in spacypdfreader/spacypdfreader.py def pdf_reader ( pdf_path : str , nlp : spacy . Language , pdf_parser : BaseParser = pdfminer . PdfminerParser , verbose : bool = False , ** kwargs : Any , ) -> spacy . tokens . Doc : \"\"\"Convert a PDF document to a spaCy Doc object. Args: pdf_path: Path to a PDF file. nlp: A spaCy Language object with a loaded pipeline. For example `spacy.load(\"en_core_web_sm\")`. pdf_parser: The parser to convert PDF file to text. Read the docs for more detailsDefaults to pdfminer.Parser. verbose: If True details will be printed to the terminal. By default, False. **kwargs: Arbitrary keyword arguments. Returns: A spacy Doc object with the custom extensions. \"\"\" if verbose : console . print ( f \"PDF to text engine: [blue bold] { pdf_parser . name } [/]...\" ) pdf_path = os . path . normpath ( pdf_path ) num_pages = _get_number_of_pages ( pdf_path ) # Convert pdf to text. if verbose : console . print ( f \"Extracting text from { num_pages } pdf pages...\" ) texts = [] for page_num in range ( 1 , num_pages + 1 ): parser = pdf_parser ( pdf_path , page_num ) text = parser . pdf_to_text ( ** kwargs ) texts . append ( text ) # Convert text to spaCy Doc objects. if verbose : console . print ( \"Converting text to [blue bold]spaCy[/] Doc...\" ) docs = [ doc for doc in nlp . pipe ( texts )] for idx , doc in enumerate ( docs ): page_num = idx + 1 for token in doc : token . _ . page_number = page_num combined_doc = Doc . from_docs ( docs ) combined_doc . _ . pdf_file_name = pdf_path if verbose : console . print ( \":white_check_mark: [green]Complete!\" ) return combined_doc","title":"spacypdfreader.spacypdfreader"},{"location":"api/spacypdfreader.spacypdfreader/#spacypdfreaderspacypdfreader","text":"","title":"spacypdfreader.spacypdfreader"},{"location":"api/spacypdfreader.spacypdfreader/#spacypdfreader.spacypdfreader","text":"","title":"spacypdfreader"},{"location":"api/spacypdfreader.spacypdfreader/#spacypdfreader.spacypdfreader.pdf_reader","text":"Convert a PDF document to a spaCy Doc object. Parameters: Name Type Description Default pdf_path str Path to a PDF file. required nlp <MagicMock name='mock.Language' id='140183424638048'> A spaCy Language object with a loaded pipeline. For example spacy.load(\"en_core_web_sm\") . required pdf_parser BaseParser The parser to convert PDF file to text. Read the docs for more detailsDefaults to pdfminer.Parser. <class 'spacypdfreader.parsers.pdfminer.PdfminerParser'> verbose bool If True details will be printed to the terminal. By default, False. False **kwargs Any Arbitrary keyword arguments. {} Returns: Type Description <MagicMock name='mock.tokens.Doc' id='140183424686384'> A spacy Doc object with the custom extensions. Source code in spacypdfreader/spacypdfreader.py def pdf_reader ( pdf_path : str , nlp : spacy . Language , pdf_parser : BaseParser = pdfminer . PdfminerParser , verbose : bool = False , ** kwargs : Any , ) -> spacy . tokens . Doc : \"\"\"Convert a PDF document to a spaCy Doc object. Args: pdf_path: Path to a PDF file. nlp: A spaCy Language object with a loaded pipeline. For example `spacy.load(\"en_core_web_sm\")`. pdf_parser: The parser to convert PDF file to text. Read the docs for more detailsDefaults to pdfminer.Parser. verbose: If True details will be printed to the terminal. By default, False. **kwargs: Arbitrary keyword arguments. Returns: A spacy Doc object with the custom extensions. \"\"\" if verbose : console . print ( f \"PDF to text engine: [blue bold] { pdf_parser . name } [/]...\" ) pdf_path = os . path . normpath ( pdf_path ) num_pages = _get_number_of_pages ( pdf_path ) # Convert pdf to text. if verbose : console . print ( f \"Extracting text from { num_pages } pdf pages...\" ) texts = [] for page_num in range ( 1 , num_pages + 1 ): parser = pdf_parser ( pdf_path , page_num ) text = parser . pdf_to_text ( ** kwargs ) texts . append ( text ) # Convert text to spaCy Doc objects. if verbose : console . print ( \"Converting text to [blue bold]spaCy[/] Doc...\" ) docs = [ doc for doc in nlp . pipe ( texts )] for idx , doc in enumerate ( docs ): page_num = idx + 1 for token in doc : token . _ . page_number = page_num combined_doc = Doc . from_docs ( docs ) combined_doc . _ . pdf_file_name = pdf_path if verbose : console . print ( \":white_check_mark: [green]Complete!\" ) return combined_doc","title":"pdf_reader()"}]}