{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#spacypdfreader","title":"spacypdfreader","text":"<p>Easy PDF to text to spaCy text extraction in Python.</p> <p> </p> <p>Documentation: https://samedwardes.github.io/spacypdfreader/</p> <p>Source code: https://github.com/SamEdwardes/spacypdfreader</p> <p>PyPi: https://pypi.org/project/spacypdfreader/</p> <p>spaCy universe: https://spacy.io/universe/project/spacypdfreader</p> <p>spacypdfreader is a python library for extracting text from PDF documents into spaCy <code>Doc</code> objects. When you use spacypdfreader the token and doc objects from spacy are annotated with additional information about the pdf.</p> <p>The key features are:</p> <ul> <li>PDF to spaCy Doc object: Convert a PDF document directly into a spaCy <code>Doc</code> object.</li> <li>Custom spaCy attributes and methods:<ul> <li><code>token._.page_number</code></li> <li><code>doc._.page_range</code></li> <li><code>doc._.first_page</code></li> <li><code>doc._.last_page</code></li> <li><code>doc._.pdf_file_name</code></li> <li><code>doc._.page(int)</code></li> </ul> </li> <li>Multiple parsers: Select between multiple built in PDF to text parsers or bring your own PDF to text parser.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install spacypdfreader using pip:</p> <pre><code>pip install spacypdfreader\n</code></pre> <p>To install with the required pytesseract dependencies:</p> <pre><code>pip install 'spacypdfreader[pytesseract]'\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>import spacy\nfrom spacypdfreader import pdf_reader\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n# Get the page number of any token.\nprint(doc[0]._.page_number)  # 1\nprint(doc[-1]._.page_number) # 4\n# Get page meta data about the PDF document.\nprint(doc._.pdf_file_name)   # \"tests/data/test_pdf_01.pdf\"\nprint(doc._.page_range)      # (1, 4)\nprint(doc._.first_page)      # 1\nprint(doc._.last_page)       # 4\n# Get all of the text from a specific PDF page.\nprint(doc._.page(4))         # \"able to display the destination page (unless...\"\n</code></pre>"},{"location":"#what-is-spacy","title":"What is spaCy?","text":"<p>spaCy is a natural language processing (NLP) tool. It can be used to perform a variety of NLP tasks. For more information check out the excellent documentation at https://spacy.io.</p>"},{"location":"#implementation-notes","title":"Implementation Notes","text":"<p>spaCyPDFreader behaves a little bit different than your typical spaCy custom component. Typically a spaCy component should receive and return a <code>spacy.tokens.Doc</code> object.</p> <p>spaCyPDFreader breaks this convention because the text must first be extracted from the PDF. Instead <code>pdf_reader</code> takes a path to a PDF file and a <code>spacy.Language</code> object as parameters and returns a <code>spacy.tokens.Doc</code> object. This allows users an easy way to extract text from PDF files while still allowing them use and customize all of the features spacy has to offer by allowing you to pass in the <code>spacy.Language</code> object.</p> <p>Example of a \"traditional\" spaCy pipeline component negspaCy:</p> <pre><code>import spacy\nfrom negspacy.negation import Negex\nnlp = spacy.load(\"en_core_web_sm\")\nnlp.add_pipe(\"negex\", config={\"ent_types\":[\"PERSON\",\"ORG\"]})\ndoc = nlp(\"She does not like Steve Jobs but likes Apple products.\")\n</code></pre> <p>Example of <code>spaCyPDFreader</code> usage:</p> <pre><code>import spacy\nfrom spacypdfreader import pdf_reader\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>Note that the <code>nlp.add_pipe</code> is not used by spaCyPDFreader.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#021-2022-01-09","title":"0.2.1 (2022-01-09)","text":"<ul> <li>Added examples to the API docs.</li> <li>Added continuous deployment for GitHub pages.</li> </ul>"},{"location":"changelog/#020-2021-12-10","title":"0.2.0 (2021-12-10)","text":"<ul> <li>Added support for additional pdf to text extraction engines:<ul> <li>pytesseract</li> <li>textract</li> </ul> </li> <li>Added the ability to bring your own pdf to text extraction engine.</li> <li>Added new spacy extension attributes and methods:<ul> <li><code>doc._.page_range</code></li> <li><code>doc._.first_page</code></li> <li><code>doc._.last_page</code></li> <li><code>doc._.pdf_file_name</code></li> <li><code>doc._.page(int)</code></li> </ul> </li> <li>Built a new documentation site: https://samedwardes.github.io/spaCyPDFreader/</li> </ul>"},{"location":"changelog/#011-2021-12-10","title":"0.1.1 (2021-12-10)","text":"<ul> <li>0.1.1 Python ^3.7 support by @SamEdwardes in https://github.com/SamEdwardes/spaCyPDFreader/pull/2</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#deployment-checklist","title":"Deployment checklist","text":"<p>Before merging changes into main the following must be completed:</p> <ul> <li> Bump the version number in pyproject.toml and spacypdfreader.init.py</li> <li> Format the code: <code>black spacypdfreader</code></li> <li> Run pytest: <code>pytest</code></li> <li> Check the docs locally: <code>mkdocs serve</code></li> </ul> <p>After merging the pull request:</p> <ul> <li> Create a new release on GitHub</li> <li> Publish latest docs to GitHub pages: <code>rm -rf site; mkdocs build; mkdocs gh-deploy;</code></li> <li> Publish latest package to PyPi: <code>poetry publish --build</code></li> </ul>"},{"location":"contributing/#code-style","title":"Code style","text":"<p>The black code formatter should be run against all code.</p> <pre><code>black spacypdfreader\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Documentation is built using Material for mkdocs. All of the documentations lives within the <code>docs/</code> directory.</p>"},{"location":"contributing/#test-the-docs-locally","title":"Test the docs locally","text":"<p>To test the docs locally run the following command:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"contributing/#publish-the-docs","title":"Publish the docs","text":"<p>The docs are hosted on using GitHub pages at https://samedwardes.github.io/spaCyPDFreader/contributing/.</p> <p>Run the following to update the docs:</p> <pre><code>rm -rf site\nmkdocs build\nmkdocs gh-deploy\n</code></pre>"},{"location":"parsers/","title":"Parsers","text":"<p>Extracting text from PDF documents can be challenging. There are several different options in the python ecosystem. spacypdfreader makes it easy to extract text from PDF documents. At this time spacypdfreader has built in support for two options:</p> <ul> <li>pdfminer: the default option (GitHub | PyPi | Docs)</li> <li>pytesseract: alternative option (GitHub | PyPi)</li> </ul> <p>You can also bring your own custom PDF to text parser to use in spacypdfreader.</p> <p>Tip</p> <p>\ud83d\udc81\u200d\u2642\ufe0f Would you like to see another parser added? Please submit an issue on GitHub and the maintainer will look into adding support.</p> <p>Tip</p> <p>Parsing big PDFs can be slow. For example, parsing a 166 page PDF document on an M1 mac took 166 seconds. If you are working with larger documents try breaking them into smaller documents and use multiprocessing.</p>"},{"location":"parsers/#comparison-of-built-in-parsers","title":"Comparison of built in parsers","text":"<p>All PDF to text parsers have their tradeoffs. The table below summaries the pros and cons of the built in parsers.</p> pdfminer pytesseract When to use \u26a1\ufe0f When speed is more important than accuracy. \ud83c\udf93 When accuracy is more important than speed. Accuracy \ud83d\udc4c Medium: from my experience pdfminer struggles with documents where the text is in one or more columns. \ud83d\udc4d High: very good. Performs well on messy documents (e.g hand written text, PDFs with multiple columns of text on a single page). Speed \ud83d\udc4c Medium: the text extraction is not instant, but it does not take forever. \ud83d\udc4e Slow: the text extraction is very slow and will take hours on hundreds of pages. Installation \ud83d\udc4d Easy: pure python, if you have installed spacypdfreader you already have everything you need. \ud83d\udc4e Complicated: relies on additional non-python dependencies that can be complicated for beginners to install. How it works Text is extracted directly from PDF using only Python. Each pdf page is converted into an image. Optical character recognition is then run on each image."},{"location":"parsers/#pdfminer","title":"pdfminer","text":"<p>A pure Python library for extracting text from PDFs.</p> <p>Installation </p> <p>No action required, pdfminer will automatically be installed when you install spacypdfreader.</p> <p>Usage</p> <p>pdfminer is the default PDF to text extraction parser for spacypdfreader:</p> <pre><code>import spacy\nfrom spacypdfreader import pdf_reader\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>You could also be more verbose and pass in additional parameters. For a list of available parameters please refer to the pdfminer documentation for the <code>extract_function</code> function.</p> <pre><code>import spacy\nfrom spacypdfreader import pdf_reader\nfrom spacypdfreader.parsers.pdfminer import PdfminerParser\nnlp = spacy.load(\"en_core_web_sm\")\nparams = {\n\"caching\": False\n}\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser, **params)\n</code></pre>"},{"location":"parsers/#pytesseract","title":"pytesseract","text":"<p>A PDf to text extraction engine that uses Googles tesseract OCR engine.</p> <p>Installation</p> <p>You can install most of the dependencies by pip installing spacypdfreader with some optional dependencies:</p> <pre><code>pip install 'spacypdfreader[pytesseract]'\n</code></pre> <p>Unfortunately this will not always install all of the dependencies because some of them are non-python related. I find that installing pytesseract can be a little bit tricky for beginners. Please refer to https://github.com/madmaze/pytesseract#installation for details on how to install pytesseract if the above does not work.</p> <p>Usage</p> <p>To use pytesseract you must pass the pytesseract parser into the <code>pdf_parser</code> argument. For a list of available parameters you can pass in refer the documentation for the <code>image_to_string</code> function from pytesseract.</p> <pre><code>import spacy\nfrom spacypdfreader import pdf_reader\nfrom spacypdfreader.parsers.pytesseract import PytesseractParser\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser)\n</code></pre>"},{"location":"parsers/#bring-your-own-parser","title":"Bring your own parser","text":"<p>spacypdfreader allows your to bring your custom PDF parser. The only requirement is that the parser must have a way for you to specify which page of the PDF document you would like to extract.</p> <p>The code below demonstrates the implementation of a new custom parser:</p> <pre><code>from typing import Any\nimport spacy\nfrom pdfminer.high_level import extract_text\nfrom spacypdfreader import pdf_reader\nfrom spacypdfreader.parsers.base import BaseParser # (1)\nclass CustomParser(BaseParser): # (2)\nname: str = \"custom\" # (3)\ndef pdf_to_text(self, **kwargs: Any) -&gt; str: # (4)\n# pdfminer uses zero indexed page numbers. Therefore need to remove 1\n# from the page count.\nself.page_number -= 1\ntext = extract_text(self.pdf_path, page_numbers=[self.page_number], **kwargs)\nreturn text\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, CustomParser)\nprint(doc._.page_range)  # (1, 4)\n</code></pre> <ol> <li><code>BaseParser</code> is the base class that all parsers inherit from in spacypdfreader.</li> <li>When creating a new class it must inherit from the <code>BaseParser</code> class.</li> <li>The new class must have a <code>name</code> attribute.</li> <li>The new class must have a method called <code>pdf_to_text</code>. This method should only convert one pdf page at a time.</li> </ol> <p>Note</p> <p>spacypdfreader uses \"1 based indexing\". The first page of the PDF is considered page 1, as opposed to page 0.</p>"},{"location":"api/spacy-extensions/","title":"spaCy custom extensions","text":"<p>When using spacypdfreader.spacypdfreader.pdf_reader custom attributes and methods are added to spacy objects.</p>"},{"location":"api/spacy-extensions/#spacydoc","title":"<code>spacy.Doc</code>","text":""},{"location":"api/spacy-extensions/#extension-attributes","title":"Extension attributes","text":"Extension Type Description <code>doc._.pdf_file_name</code> <code>str</code> The file name of the PDF document. <code>doc._.first_page</code> <code>int</code> The first page number of the PDF. <code>doc._.last_page</code> <code>int</code> The last page number of the PDF. <code>doc._.page_range</code> <code>(int, int)</code> The range of pages from the PDF. <code>doc._.page(int)</code> <code>int</code> Return the span of text related to the page."},{"location":"api/spacy-extensions/#extension-methods","title":"Extension methods","text":""},{"location":"api/spacy-extensions/#doc_page","title":"<code>Doc._.page</code>","text":"<p>Parameters:</p> Name Type Description Default <code>page_number</code> <code>int</code> The PDF page number of the doc to filter on. required <p>Returns:</p> Type Description <code>spacy.Span</code> The span of text from the corresponding PDF page number."},{"location":"api/spacy-extensions/#spacytoken","title":"<code>spacy.Token</code>","text":""},{"location":"api/spacy-extensions/#extension-attributes_1","title":"Extension attributes","text":"Extension Type Description <code>token._.page_number</code> <code>int</code> The PDF page number in which the token was extracted from. The first page is <code>1</code>."},{"location":"api/spacypdfreader.parsers/","title":"spacypdfreader.parsers","text":""},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.base.BaseParser","title":"<code>spacypdfreader.parsers.base.BaseParser</code>","text":"<p>The base parser class.</p> <p>The <code>BaseParser</code> is used to extend spacypdfreader with additional PDF to text parsers. See Parsers section in the documentation for additional details.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>A string name representation of the class. Will only be used for information purposes by being printed to the terminal when running.</p> <code>pdf_path</code> <p>Path to a PDF file.</p> <code>page_number</code> <p>The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0).</p> Source code in <code>spacypdfreader/parsers/base.py</code> <pre><code>class BaseParser:\n\"\"\"The base parser class.\n    The `BaseParser` is used to extend spacypdfreader with additional PDF to\n    text parsers. See [Parsers](/parsers) section in the documentation for\n    additional details.\n    Attributes:\n        name: A string name representation of the class. Will only be used for\n            information purposes by being printed to the terminal when running.\n        pdf_path: Path to a PDF file.\n        page_number: The page number of the PDF to convert from PDF to text.\n            Must be one digit based indexing (e.g. the first page of the PDF is\n            page 1, as opposed to page 0).\n    \"\"\"\nname: str = \"base\"\npdf_path: str\npage_number: int\ndef __init__(self, pdf_path: str, page_number: int) -&gt; None:\n\"\"\"\n        Args:\n            pdf_path: Path to a PDF file.\n            page_number: The page number of the PDF to convert from PDF to text.\n                Must be one digit based indexing (e.g. the first page of the PDF is\n                page 1, as opposed to page 0).\n        \"\"\"\nself.pdf_path = pdf_path\nself.page_number = page_number\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.base.BaseParser.__init__","title":"<code>__init__(pdf_path: str, page_number: int) -&gt; None</code>","text":"<p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>str</code> <p>Path to a PDF file.</p> required <code>page_number</code> <code>int</code> <p>The page number of the PDF to convert from PDF to text. Must be one digit based indexing (e.g. the first page of the PDF is page 1, as opposed to page 0).</p> required Source code in <code>spacypdfreader/parsers/base.py</code> <pre><code>def __init__(self, pdf_path: str, page_number: int) -&gt; None:\n\"\"\"\n    Args:\n        pdf_path: Path to a PDF file.\n        page_number: The page number of the PDF to convert from PDF to text.\n            Must be one digit based indexing (e.g. the first page of the PDF is\n            page 1, as opposed to page 0).\n    \"\"\"\nself.pdf_path = pdf_path\nself.page_number = page_number\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pdfminer.PdfminerParser","title":"<code>spacypdfreader.parsers.pdfminer.PdfminerParser</code>","text":"<p>         Bases: <code>BaseParser</code></p> <p>Convert PDFs to text using pdfminer.</p> <p>The pdfminer library is \"pure python\" library for converting PDF into text. pdfminer is relatively fast, but has low accuracy than other parsers such as pytesseract.</p> <p>Refer to spacypdfreader.parsers.base.BaseParser for a list of attributes and the <code>__init__</code> method.</p> <p>Examples:</p> <p><code>PdfminerParser</code> is the default PDF to text parser and will be automatically used unless otherwise specificied.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>To be more explicit import <code>PdfminerParser</code> and pass it into the <code>pdf_reader</code> function.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import PdfminerParser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser)\n</code></pre> <p>For more fine tuning you can pass in additional parameters to pdfminer.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import PdfminerParser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; params = {\"caching\": False}\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser, **params)\n</code></pre> Info <p>See the pdfminer section in the docs for more details on the implementation of pdfminer. For more details on pdfminer refer to the pdfminer docs.</p> Source code in <code>spacypdfreader/parsers/pdfminer.py</code> <pre><code>class PdfminerParser(BaseParser):\n\"\"\"Convert PDFs to text using pdfminer.\n    The pdfminer library is \"pure python\" library for converting PDF into text.\n    pdfminer is relatively fast, but has low accuracy than other parsers such as\n    [pytesseract](/parsers/#pytesseract).\n    Refer to [spacypdfreader.parsers.base.BaseParser][] for a list of attributes\n    and the `__init__` method.\n    Examples:\n        `PdfminerParser` is the default PDF to text parser and will be\n        automatically used unless otherwise specificied.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n        To be more explicit import `PdfminerParser` and pass it into the\n        `pdf_reader` function.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import PdfminerParser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser)\n        For more fine tuning you can pass in additional parameters to pdfminer.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import PdfminerParser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; params = {\"caching\": False}\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser, **params)\n    Info:\n        See the [pdfminer section](/parsers/#pdfminer) in the docs for more\n        details on the implementation of pdfminer. For more details on pdfminer\n        refer to the\n        [pdfminer docs](https://pdfminersix.readthedocs.io/en/latest/).\n    \"\"\"\nname: str = \"pdfminer\"\ndef pdf_to_text(self, **kwargs: Any) -&gt; str:\n\"\"\"Convert a PDF page to text using the `extract_text` function from\n        pdfminer.\n        Args:\n            **kwargs: Arbitrary keyword arguments. See the pdfminer docs for the\n                [extract_text](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text)\n                function for the available keywork arguments.\n        Returns:\n            A string respresentation of the PDF page.\n        \"\"\"\n# pdfminer uses zero indexed page numbers. Therefore need to remove 1\n# from the page count.\nself.page_number -= 1\ntext = extract_text(self.pdf_path, page_numbers=[self.page_number], **kwargs)\nreturn text\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pdfminer.PdfminerParser.pdf_to_text","title":"<code>pdf_to_text(**kwargs: Any) -&gt; str</code>","text":"<p>Convert a PDF page to text using the <code>extract_text</code> function from pdfminer.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Arbitrary keyword arguments. See the pdfminer docs for the extract_text function for the available keywork arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>A string respresentation of the PDF page.</p> Source code in <code>spacypdfreader/parsers/pdfminer.py</code> <pre><code>def pdf_to_text(self, **kwargs: Any) -&gt; str:\n\"\"\"Convert a PDF page to text using the `extract_text` function from\n    pdfminer.\n    Args:\n        **kwargs: Arbitrary keyword arguments. See the pdfminer docs for the\n            [extract_text](https://pdfminersix.readthedocs.io/en/latest/reference/highlevel.html#extract-text)\n            function for the available keywork arguments.\n    Returns:\n        A string respresentation of the PDF page.\n    \"\"\"\n# pdfminer uses zero indexed page numbers. Therefore need to remove 1\n# from the page count.\nself.page_number -= 1\ntext = extract_text(self.pdf_path, page_numbers=[self.page_number], **kwargs)\nreturn text\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pytesseract.PytesseractParser","title":"<code>spacypdfreader.parsers.pytesseract.PytesseractParser</code>","text":"<p>         Bases: <code>BaseParser</code></p> <p>Convert PDFs to text using pytesseract.</p> <p>The pytesseract library has the highest accuracy of all the PDF to text parsers included in spacypdfreader. It takes a different approach than other parsers. It first converts the PDF to an image, then runs an OCR engine on the image to extract the text. pytesseract results in the best quality but can be very slow compared to other parsers.</p> <p>Refer to spacypdfreader.parsers.base.BaseParser for a list of attributes and the <code>__init__</code> method.</p> <p>Examples:</p> <p>To use <code>PytesseractParser</code> it must be explicitly imported and passed into the <code>pdf_reader</code> function.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser)\n</code></pre> <p>For more fine tuning you can pass in additional parameters to pytesseract.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; params = {\"nice\": 1}\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser, **params)\n</code></pre> Info <p>See the pytesseract section in the docs for more details on the implementation of pytesseract. For more details on pytesseract see the pytesseract docs.</p> Source code in <code>spacypdfreader/parsers/pytesseract.py</code> <pre><code>class PytesseractParser(BaseParser):\n\"\"\"Convert PDFs to text using pytesseract.\n    The pytesseract library has the highest accuracy of all the PDF to text\n    parsers included in spacypdfreader. It takes a different approach than other\n    parsers. It first converts the PDF to an image, then runs an OCR engine on\n    the image to extract the text. pytesseract results in the best quality but\n    can be very slow compared to other parsers.\n    Refer to [spacypdfreader.parsers.base.BaseParser][] for a list of attributes\n    and the `__init__` method.\n    Examples:\n        To use `PytesseractParser` it must be explicitly imported and passed\n        into the `pdf_reader` function.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser)\n        For more fine tuning you can pass in additional parameters to\n        pytesseract.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; params = {\"nice\": 1}\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser, **params)\n    Info:\n        See the [pytesseract section](/parsers/#pytesseract) in the docs for\n        more details on the implementation of pytesseract. For more details on\n        pytesseract see the\n        [pytesseract docs](https://github.com/madmaze/pytesseract).\n    \"\"\"\nname: str = \"pytesseract\"\ndef pdf_to_text(self, **kwargs: Any) -&gt; str:\n\"\"\"Convert a PDF page to text using the `image_to_string` function from\n        pytesseract.\n        Args:\n            **kwargs: Arbitrary keyword arguments. See the pytesseract docs for\n                the [image_to_string](https://github.com/madmaze/pytesseract)\n                function for the available keyword arguments.\n        Returns:\n            A string respresentation of the PDF page.\n        \"\"\"\nwith tempfile.TemporaryDirectory() as tmp_dir:\n# Convert pdf page to image.\nfile_name = convert_from_path(\nself.pdf_path,\noutput_folder=tmp_dir,\npaths_only=True,\nfirst_page=self.page_number,\nlast_page=self.page_number + 1,\n)[0]\n# Convert images to text.\nfile_path = os.path.join(tmp_dir, file_name)\ntext = str(image_to_string(Image.open(file_path), **kwargs))\nreturn text\n</code></pre>"},{"location":"api/spacypdfreader.parsers/#spacypdfreader.parsers.pytesseract.PytesseractParser.pdf_to_text","title":"<code>pdf_to_text(**kwargs: Any) -&gt; str</code>","text":"<p>Convert a PDF page to text using the <code>image_to_string</code> function from pytesseract.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Arbitrary keyword arguments. See the pytesseract docs for the image_to_string function for the available keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>A string respresentation of the PDF page.</p> Source code in <code>spacypdfreader/parsers/pytesseract.py</code> <pre><code>def pdf_to_text(self, **kwargs: Any) -&gt; str:\n\"\"\"Convert a PDF page to text using the `image_to_string` function from\n    pytesseract.\n    Args:\n        **kwargs: Arbitrary keyword arguments. See the pytesseract docs for\n            the [image_to_string](https://github.com/madmaze/pytesseract)\n            function for the available keyword arguments.\n    Returns:\n        A string respresentation of the PDF page.\n    \"\"\"\nwith tempfile.TemporaryDirectory() as tmp_dir:\n# Convert pdf page to image.\nfile_name = convert_from_path(\nself.pdf_path,\noutput_folder=tmp_dir,\npaths_only=True,\nfirst_page=self.page_number,\nlast_page=self.page_number + 1,\n)[0]\n# Convert images to text.\nfile_path = os.path.join(tmp_dir, file_name)\ntext = str(image_to_string(Image.open(file_path), **kwargs))\nreturn text\n</code></pre>"},{"location":"api/spacypdfreader.spacypdfreader/","title":"spacypdfreader.spacypdfreader","text":""},{"location":"api/spacypdfreader.spacypdfreader/#spacypdfreader.spacypdfreader","title":"<code>spacypdfreader.spacypdfreader</code>","text":""},{"location":"api/spacypdfreader.spacypdfreader/#spacypdfreader.spacypdfreader.pdf_reader","title":"<code>pdf_reader(pdf_path: str, nlp: spacy.Language, pdf_parser: BaseParser = pdfminer.PdfminerParser, verbose: bool = False, **kwargs: Any) -&gt; spacy.tokens.Doc</code>","text":"<p>Convert a PDF document to a spaCy Doc object.</p> <p>Parameters:</p> Name Type Description Default <code>pdf_path</code> <code>str</code> <p>Path to a PDF file.</p> required <code>nlp</code> <code>spacy.Language</code> <p>A spaCy Language object with a loaded pipeline. For example <code>spacy.load(\"en_core_web_sm\")</code>.</p> required <code>pdf_parser</code> <code>BaseParser</code> <p>The parser to convert PDF file to text. Read the docs for more detailsDefaults to pdfminer.Parser.</p> <code>pdfminer.PdfminerParser</code> <code>verbose</code> <code>bool</code> <p>If True details will be printed to the terminal. By default, False.</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <code>spacy.tokens.Doc</code> <p>A spacy Doc object with the custom extensions.</p> <p>Examples:</p> <p>By default pdfminer is used to extract text from the PDF.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n</code></pre> <p>To be more explicit import <code>PdfminerParser</code> and pass it into the <code>pdf_reader</code> function.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import PdfminerParser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser)\n</code></pre> <p>Alternative parsers can be used as well such as pytesseract.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser)\n</code></pre> <p>For more fine tuning you can pass in additional parameters to pytesseract.</p> <pre><code>&gt;&gt;&gt; import spacy\n&gt;&gt;&gt; from spacypdfreader import pdf_reader\n&gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n&gt;&gt;&gt;\n&gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n&gt;&gt;&gt; params = {\"nice\": 1}\n&gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser, **params)\n</code></pre> Source code in <code>spacypdfreader/spacypdfreader.py</code> <pre><code>def pdf_reader(\npdf_path: str,\nnlp: spacy.Language,\npdf_parser: BaseParser = pdfminer.PdfminerParser,\nverbose: bool = False,\n**kwargs: Any,\n) -&gt; spacy.tokens.Doc:\n\"\"\"Convert a PDF document to a spaCy Doc object.\n    Args:\n        pdf_path: Path to a PDF file.\n        nlp: A spaCy Language object with a loaded pipeline. For example\n            `spacy.load(\"en_core_web_sm\")`.\n        pdf_parser: The parser to convert PDF file to text. Read the docs for\n            more detailsDefaults to pdfminer.Parser.\n        verbose: If True details will be printed to the terminal. By default,\n            False.\n        **kwargs: Arbitrary keyword arguments.\n    Returns:\n        A spacy Doc object with the custom extensions.\n    Examples:\n        By default pdfminer is used to extract text from the PDF.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp)\n        To be more explicit import `PdfminerParser` and pass it into the\n        `pdf_reader` function.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pdfminer import PdfminerParser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PdfminerParser)\n        Alternative parsers can be used as well such as pytesseract.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser)\n        For more fine tuning you can pass in additional parameters to\n        pytesseract.\n        &gt;&gt;&gt; import spacy\n        &gt;&gt;&gt; from spacypdfreader import pdf_reader\n        &gt;&gt;&gt; from spacypdfreader.parsers.pytesseract import PytesseractParser\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; nlp = spacy.load(\"en_core_web_sm\")\n        &gt;&gt;&gt; params = {\"nice\": 1}\n        &gt;&gt;&gt; doc = pdf_reader(\"tests/data/test_pdf_01.pdf\", nlp, PytesseractParser, **params)\n    \"\"\"\nif verbose:\nconsole.print(f\"PDF to text engine: [blue bold]{pdf_parser.name}[/]...\")\npdf_path = os.path.normpath(pdf_path)\nnum_pages = _get_number_of_pages(pdf_path)\n# Convert pdf to text.\nif verbose:\nconsole.print(f\"Extracting text from {num_pages} pdf pages...\")\ntexts = []\nfor page_num in range(1, num_pages + 1):\nparser = pdf_parser(pdf_path, page_num)\ntext = parser.pdf_to_text(**kwargs)\ntexts.append(text)\n# Convert text to spaCy Doc objects.\nif verbose:\nconsole.print(\"Converting text to [blue bold]spaCy[/] Doc...\")\ndocs = [doc for doc in nlp.pipe(texts)]\nfor idx, doc in enumerate(docs):\npage_num = idx + 1\nfor token in doc:\ntoken._.page_number = page_num\ncombined_doc = Doc.from_docs(docs)\ncombined_doc._.pdf_file_name = pdf_path\nif verbose:\nconsole.print(\":white_check_mark: [green]Complete!\")\nreturn combined_doc\n</code></pre>"}]}